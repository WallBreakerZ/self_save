# 前言

大家好，我是Three~好久不见！

今天带给大家五道题：[力扣136. 只出现一次的数字](https://leetcode-cn.com/problems/single-number/)，[力扣137. 只出现一次的数字 II](https://leetcode-cn.com/problems/single-number-ii/)，[力扣260. 只出现一次的数字 III](https://leetcode-cn.com/problems/single-number-iii/)，[剑指 Offer 56 - I. 数组中数字出现的次数](https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/)，[剑指 Offer 56 - II. 数组中数字出现的次数 II](https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-ii-lcof/)。

今天的目标就是满足各个题目的进阶要求，解题顺序按照难度顺序安排，方法都是位运算。

# 思路与代码

## [力扣136. 只出现一次的数字](https://leetcode-cn.com/problems/single-number/)

**题目：**

> 给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
> 说明：
> 你的算法应该具有线性时间复杂度。你可以不使用额外空间来实现吗？

显然，这一题是今天题目的简化版。在一堆成对的数字中找一个落单的，可以考虑使用`异或运算`。

理由是：
+ 1.两个相同数字做异或运算，结果为0。这个结果可以帮我们排除掉成对的数字；
+ 2.0和任何数字进行异或运算，都得到这个数字本身。

所以，只要对`nums`中的所有元素进行异或，就可以得到答案。

**代码：**

* c++

```c++
class Solution {
public:
    int singleNumber(vector<int>& nums) { // 异或运算，对所有进行异或运算，最终得到的就是结果。
        int res = 0;
        for (auto num: nums) res ^= num;
        return res;
    }
};
```

## [力扣137. 只出现一次的数字 II](https://leetcode-cn.com/problems/single-number-ii/)

今天的题目和[剑指 Offer 56 - II. 数组中数字出现的次数 II](https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-ii-lcof/)是一样的。如果大家没有《剑指offer 第二版》的电子版，可以[点击这里](https://github.com/ThreeSR/Good-Learning-Resources/blob/master/%E5%89%91%E6%8C%87OFFER%20%E7%AC%AC2%E7%89%88.pdf)下载。

从上面一题可以得到`位运算`的思路。但是如果还是仅仅使用`异或运算`，我们会发现寸步难行。也就是说，这道题虽然和上面的题目很像，但方法上面不能简单地进行承接。（Too Sad~o(╥﹏╥)o）

我们换个思路，或许可以考虑从`每个元素都出现三次`入手。如果从次数入手，我们可以想到能不能和什么东西`整除3`挂钩。**因为除了某个元素，其他元素都是三个三个为一组的**。

我们可以注意到：`-2^31 <= nums[i] <= 2^31 - 1`，这意味着我们处理的数据都是32位的数据。如果把每一个数字都看成`二进制`，那么一个十进制数`nums[i]`对应一个32位的二进制数。将所有`nums[i]`对应的二进制数的对应位求和，将每一对应位的和值与3进行取模运算，得到的余数就是答案的对应二进制位的数值。**这是因为除了答案本身，其它元素都是三个三个为一组的。**

上面的语言有些抽象，我们举个例子：

+ 如果输入是：`nums = [2,2,3,2]`，那么它的各个元素对应的32位二进制数就是`[00000000000000000000000000000010, 00000000000000000000000000000010, 00000000000000000000000000000011, 00000000000000000000000000000010]`；
+ 接着，对这些二进制数的对应位进行求和，得到：`[00000000000000000000000000000041]`；
+ 对这个求和结果的每一位进行3的取模运算，得到：`[00000000000000000000000000000011]`；
+ 把上面的结果从二进制转换为十进制，就是：`3`。这就是我们的答案。

**代码：**

* c++

```c++
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int res = 0;
        for (int i = 0; i < 32; i++) { // 因为nums[i]是32位整数，
        // 所以针对每一位的对应二进制数值求和
            int sum = 0;
            for (int num : nums) {
                sum += ((num >> i) & 1); // 提取从右往左数第i位的数值，将所有nums[i]
                // 二进制下的第i位数值进行求和
            }
            if (sum % 3 == 1) { // 如果没办法被3整除，那么说明落单的那个数的第i位是1不是0
                res |= (1 << i);
            }
        }
        return res; // 输出结果
    }
};
```

**运行结果：**

![LC137.jpg](https://pic.leetcode-cn.com/1619720163-XMztim-LC137.jpg)

既然本题已经解决，那就顺便解决[剑指 Offer 56 - II. 数组中数字出现的次数 II](https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-ii-lcof/)吧~

## [力扣260. 只出现一次的数字 III](https://leetcode-cn.com/problems/single-number-iii/)

题目：

> 给定一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。你可以按 任意顺序 返回答案。
> 进阶：你的算法应该具有线性时间复杂度。你能否仅使用常数空间复杂度来实现？

示例：

> 输入：nums = [1,2,1,3,2,5]
> 输出：[3,5]
> 解释：[5, 3] 也是有效的答案。

本题中，次数回归到一开始的`两次`，但是比较调皮的是，落单的元素`不止一个`。

已经写过的上面两道题目，对这道题可以带来什么样的启发？
+ 启发一：应该可以尝试`异或运算`，因为元素出现的频次变成了2；
+ 启发二：显然做一次`异或运算`不能得到结果，在一次`异或运算`的基础上，我们可以效仿[力扣137. 只出现一次的数字 II](https://leetcode-cn.com/problems/single-number-ii/)，对异或之后的结果的二进制位进行分析处理。

我们的核心思想还是使用`异或运算`，但对于两个落单的元素，我们需要想到一个分类法则，让它们俩分来。对于它们俩所在的两个分组，分别进行`异或运算`，就可以得到答案。

下面是分类方法的设计，我们举一个例子看看：
+ 对于`nums = [1,2,1,3,2,5]`，转为二进制为：`[0001, 0010, 0001, 0011, 0010, 0101]`;
+ 进行异或，得到结果：`0110`；
+ 针对上面的结果，发现从右往左数（从0开始）第1位上，两个落单的数字是不同的。我们可以把数组`nums`中的数值进行分组，分组依据就是各个数值`nums[i]`的第1位是否为0。这样一来，我们可以把两个落单的数值分到不同的组里面。在不同组里面，我们使用异或运算即可。我们可以把这个不同的位数提取出来：`0010`；
+ 将`[1,2,1,3,2,5]`逐个和`0010`进行`与运算`，进行“分组”。之后对每一个“分组”中的元素进行`异或运算`即可。

**代码：**

* c++

```c++
class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        int group1 = 0, group2 = 0;
        int diff = 0, bit = 1;
        for (int num : nums) // 异或运算，目的是找到两个落单数值的不同，便于后面分类
            diff ^= num;
        while ((diff & bit) == 0) //  左移运算，找到二者某一位的不同，将这一位定为分类依据
            bit <<= 1;
        for (int num : nums) { // 对元素进行遍历    
            if(num & bit) group1 ^= num; // 对于num，如果对于bit为1，分类为group1，对这个
            // group进行异或，可以找到落单的数值
            else group2 ^= num; // 如果num的bit对应的是0，那么异或找到另一个落单的数值
        }
        return vector<int> {group1, group2};   // 返回结果
    }
};
```

上面的注释很详细，我不再赘述。

因为[剑指 Offer 56 - I. 数组中数字出现的次数](https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/)和本题一致，所以顺便可以把这题写了。

至此，我们完成了五道题，还是蛮有收获的。

# 结尾

一些比较经常看到我的题解的朋友，可能会看到【击双】（其实就是举一反二），【举一反三】和【题以类解】的字样。这是我正在整理的东西，我希望大家在2000多道力扣中可以找到其中的关联，然后更有效地刷题。

欢迎大家[关注我!](https://leetcode-cn.com/u/threesr/)

（因为有学校的事情和我自己才疏学浅，所以没办法保证日日发布题解，还请关注我的同学见谅~~）

![image.png](https://pic.leetcode-cn.com/1617215199-waykKn-image.png)

![slogan.png](https://pic.leetcode-cn.com/1617352269-yGtadm-slogan.png)

